#!/usr/bin/env ruby

# == Synopsis
#
# snmpdevice: Get snmp infomation from device
#
# == Usage
#
# snmpdevice [OPTION] device-ip
#
# -h, --help:
#    show help
#
# --comunity c, -c c
#    comunity string, default "public"
#
# device-ip: Device ip address
#
# == Examples
#
# snmpdevice -c comunity 10.0.0.1
#    Get snmp infomation from 10.0.0.1, with comunity password "comunity"
#
# == Author and license
#    Written by MengBo
#    Distributed under the same license as Ruby is
#

require 'snmpdevice'

require 'getoptlong'
require 'rdoc/usage'

opts = GetoptLong.new(
  [ '--help', '-h', GetoptLong::NO_ARGUMENT ],
  [ '--comunity', '-c', GetoptLong::REQUIRED_ARGUMENT ]
)

comunity = "public"

opts.each do |opt, arg|
  case opt
  when '--help'
    RDoc::usage
  when '--comunity'
    comunity = arg
  when '--verbose'
    verbose = true
  end
end

if ARGV.length != 1
  print "\nMissing device-ip argument (try --help)\n\n"
  exit 0
end

device = SNMPDevice::Base.create_device(:Host => ARGV.shift, :Community => comunity )

puts "Device Name:"
puts "#{device.get_sys_name}"
puts

puts "System description:"
puts "#{device.get_sys_descr}"
puts

puts "Default gateway:"
puts "#{device.find_default_gateway}"
puts

puts "Uplink interface:"
puts "#{device.find_uplink_interface_name}\t#{device.find_uplink_interface_mac}"
puts

puts "Interface IP address:"
device.find_all_interface_ip.each do |i|
  puts "#{device.find_interface_name_by_ip(i)}: #{i}/#{device.find_interface_mask_by_ip(i)}"
end
puts

puts "Routing table:"
device.get_routing_table.each do |item|
  puts "#{item[:ip]}/#{item[:mask]}\t#{item[:nexthop]}\t#{item[:ifname]}"
end
puts

puts "ARP table:"
device.get_arp_table.each do |item|
  phy_interface = device.find_interface_name_by_mac(item[:mac])
  puts "#{item[:ip]}\t#{item[:mac]}\t#{item[:ifname]}\t#{phy_interface}"
end
puts

if (device.class == SNMPDevice::CISCO76)
  puts "Device temperature:"
  device.get_temp.each do |i|
    puts "#{i[0]} is #{i[1]}"
  end
end
